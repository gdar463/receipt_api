diff --git a/dist/context.d.ts b/dist/context.d.ts
index f691a8b574f63d01bbb3a6da460cd100a36ff7de..90be9519c30b998b44eafc1e2d3dfc9b84a5a7d6 100644
--- a/dist/context.d.ts
+++ b/dist/context.d.ts
@@ -54,6 +54,7 @@ export type ErrorContext<in out Route extends RouteSchema = {}, in out Singleton
     response: Route['response'];
 } & Singleton['decorator'] & Singleton['derive'] & Singleton['resolve']>;
 type PrettifyIfObject<T> = T extends object ? Prettify<T> : T;
+export type StatusFunc = {} extends Route['response'] ? typeof status : <const Code extends keyof Route['response'] | InvertedStatusMap[Extract<InvertedStatusMapKey, keyof Route['response']>], const T extends Code extends keyof Route['response'] ? Route['response'][Code] : Code extends keyof StatusMap ? Route['response'][StatusMap[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<Code, T>;
 export type Context<in out Route extends RouteSchema = {}, in out Singleton extends SingletonBase = {
     decorator: {};
     store: {};
@@ -107,7 +108,7 @@ export type Context<in out Route extends RouteSchema = {}, in out Singleton exte
     route: string;
     request: Request;
     store: Singleton['store'];
-    status: {} extends Route['response'] ? typeof status : <const Code extends keyof Route['response'] | InvertedStatusMap[Extract<InvertedStatusMapKey, keyof Route['response']>], const T extends Code extends keyof Route['response'] ? Route['response'][Code] : Code extends keyof StatusMap ? Route['response'][StatusMap[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<Code, T>;
+    status: StatusFunc;
     /**
     * @deprecated use `status` instead
     */
diff --git a/dist/index.d.ts b/dist/index.d.ts
index ac0d5716f9b4a0de88a6ec6be0b267ac015917bb..973eccba5333c2ff2bf8d74874dfaa4a1eeeb65e 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1811,7 +1811,7 @@ export default class Elysia<const in out BasePath extends string = '', const in
 export { Elysia };
 export { t } from './type-system';
 export { serializeCookie, Cookie, type CookieOptions } from './cookies';
-export type { Context, PreContext, ErrorContext } from './context';
+export type { Context, PreContext, ErrorContext, StatusFunc } from './context';
 export { ELYSIA_TRACE, type TraceEvent, type TraceListener, type TraceHandler, type TraceProcess, type TraceStream } from './trace';
 export { getSchemaValidator, getResponseSchemaValidator, replaceSchemaType } from './schema';
 export { mergeHook, mergeObjectArray, redirect, StatusMap, InvertedStatusMap, form, replaceUrlPath, checksum, cloneInference, deduplicateChecksum, ELYSIA_FORM_DATA, ELYSIA_REQUEST_ID, sse } from './utils';
